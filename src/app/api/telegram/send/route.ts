// API Route –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ Telegram
// –≠—Ç–æ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ö–æ–¥–∏—Ç CSP –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞

import { NextRequest, NextResponse } from 'next/server';

interface OrderData {
  orderId: string;
  fullName: string;
  phone: string;
  paymentType: 'cash' | 'card' | 'qr';
  deliveryType: 'delivery' | 'pickup';
  address: {
    city: string;
    street: string;
    house: string;
    apartment?: string;
    entrance?: string;
    floor?: string;
  };
  comment?: string;
  items: Array<{
    id: string;
    name: string;
    price: number;
    quantity: number;
    color?: string;
    storage?: string;
    image: string;
  }>;
  total: number;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø –æ–ø–ª–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π
 */
const formatPaymentType = (type: string): string => {
  const types: Record<string, string> = {
    cash: 'üíµ –ù–∞–ª–∏—á–Ω—ã–µ',
    card: 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
    qr: 'üì± –û–ø–ª–∞—Ç–∞ –ø–æ QR-–∫–æ–¥—É',
  };
  return types[type] || type;
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
 */
const formatDeliveryType = (type: string): string => {
  const types: Record<string, string> = {
    delivery: 'üöö –î–æ—Å—Ç–∞–≤–∫–∞',
    pickup: 'üè™ –°–∞–º–æ–≤—ã–≤–æ–∑',
  };
  return types[type] || type;
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
 */
const formatOrderMessage = (orderData: OrderData): string => {
  const {
    orderId,
    fullName,
    phone,
    paymentType,
    deliveryType,
    address,
    comment,
    items,
    total,
  } = orderData;

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
  const itemsList = items
    .map((item) => {
      const variants = [item.color, item.storage].filter(Boolean).join(', ');
      const variantsText = variants ? ` (${variants})` : '';
      const itemTotal = item.price * item.quantity;
      return `  ‚Ä¢ ${item.name}${variantsText}\n    ${item.quantity} —à—Ç √ó ${item.price.toLocaleString()} = <b>${itemTotal.toLocaleString()} —Å–æ–º</b>`;
    })
    .join('\n\n');

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
  let addressText = '';
  if (deliveryType === 'delivery') {
    const addressParts = [
      `${address.city}, —É–ª. ${address.street}, –¥. ${address.house}`,
    ];
    if (address.apartment) addressParts.push(`–∫–≤. ${address.apartment}`);
    if (address.entrance) addressParts.push(`–ø–æ–¥—ä–µ–∑–¥ ${address.entrance}`);
    if (address.floor) addressParts.push(`—ç—Ç–∞–∂ ${address.floor}`);

    addressText = `\n\nüìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n${addressParts.join(', ')}`;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  const commentText = comment
    ? `\n\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n${comment}`
    : '';

  // –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  return `
üõç <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderId}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${fullName}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}

üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> ${formatPaymentType(paymentType)}
üöö <b>–ü–æ–ª—É—á–µ–Ω–∏–µ:</b> ${formatDeliveryType(deliveryType)}${addressText}

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
${itemsList}

üí∞ <b>–ò–¢–û–ì–û: ${total.toLocaleString()} —Å–æ–º</b>${commentText}

‚è∞ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ${new Date().toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  })}
`.trim();
};

export async function POST(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const orderData: OrderData = await request.json();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;

    console.log('üîç Telegram credentials check:');
    console.log('Bot token exists:', !!botToken);
    console.log('Chat ID exists:', !!chatId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ chat ID
    if (!botToken || !chatId) {
      console.error('‚ùå Telegram bot token or chat ID is not configured');
      return NextResponse.json(
        { error: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.' },
        { status: 500 }
      );
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = formatOrderMessage(orderData);
    console.log('üìù Message formatted, length:', message.length);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    console.log('üì§ Sending to Telegram...');
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML',
        }),
      }
    );

    const data = await response.json();
    console.log('üì® Telegram API response:', JSON.stringify(data, null, 2));

    if (!data.ok) {
      console.error('‚ùå Telegram API error:', data);
      return NextResponse.json(
        {
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ Telegram',
          details: data.description || 'Unknown error'
        },
        { status: 500 }
      );
    }

    // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    console.log('‚úÖ Message sent successfully!');
    return NextResponse.json({ success: true, messageId: data.result.message_id });
  } catch (error) {
    console.error('‚ùå Error sending to Telegram:', error);
    return NextResponse.json(
      { error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞', details: String(error) },
      { status: 500 }
    );
  }
}
